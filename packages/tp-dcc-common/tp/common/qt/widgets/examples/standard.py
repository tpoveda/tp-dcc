from Qt.QtCore import Qt
from Qt.QtWidgets import (
	QWidget, QFrame, QVBoxLayout, QHBoxLayout, QGridLayout, QTabWidget, QMenuBar, QAction, QMainWindow, QGroupBox,
	QPushButton, QRadioButton, QCheckBox, QSpinBox, QDoubleSpinBox, QComboBox, QLineEdit, QSlider, QTextEdit,
	QTreeWidget, QListWidget, QTableWidget, QProgressBar, QTreeWidgetItem, QListWidgetItem, QTableWidgetItem, QLabel,
	QToolBox, QSpacerItem, QSizePolicy, QStatusBar
)

from tp.preferences import manager as preferences


class StandardWidgetsMainWindow(QMainWindow):
	def __init__(self, parent=None):
		super(StandardWidgetsMainWindow, self).__init__(parent=parent)

		self.ui()

		self.setWindowTitle('Main - Standard Qt Widgets Gallery')
		self.resize(1125, 579)

		theme_preferences = preferences.get_theme_preference_interface()
		result = theme_preferences.stylesheet()
		self.setStyleSheet(result.data)

	def ui(self):

		main_widget = QWidget(parent=self)
		main_layout = QVBoxLayout()
		main_layout.setContentsMargins(0, 0, 0, 0)
		main_widget.setLayout(main_layout)
		self.setCentralWidget(main_widget)

		grid_layout = QGridLayout()

		menubar = QMenuBar(parent=self)
		menu_menu = menubar.addMenu('Menu')
		menu_menu.addAction('Switch UI')
		file_menu = menubar.addMenu('File')
		file_menu.addAction('This is a test')
		file_menu.addSeparator()
		file_menu.addAction('This is not a test')
		file_menu.addSeparator()
		file_parent_menu = file_menu.addMenu('Tis is a parent')
		file_sub_parent_menu = file_parent_menu.addMenu('This is a sub parent')
		file_sub_parent_menu.addAction('This is a child')
		debug_menu = menubar.addMenu('Debug')
		debug_action_1 = QAction('This is a checkbox', parent=debug_menu)
		debug_action_1.setCheckable(True)
		debug_action_2 = QAction('This is a checkbox', parent=debug_menu)
		debug_action_2.setCheckable(True)
		debug_action_2.setChecked(True)
		debug_menu.addAction(debug_action_1)
		debug_menu.addAction(debug_action_2)

		tab_1 = QTabWidget(parent=self)
		tab_1.setTabPosition(QTabWidget.West)
		tab_widget_1 = QWidget(parent=self)
		tab_widget_1.setLayout(QGridLayout())
		tab_1.addTab(tab_widget_1, 'Tab 1')
		push_button_group_box = QGroupBox('Push Button', parent=self)
		push_button_group_box.setLayout(QGridLayout())
		push_button_group_box.setCheckable(True)
		push_button_group_box.setChecked(True)
		tab_widget_1.layout().addWidget(push_button_group_box, 0, 0, 1, 2)
		default_button = QPushButton('Default', parent=self)
		checked_button = QPushButton('Checked', parent=self)
		checked_button.setCheckable(True)
		checked_button.setChecked(True)
		disabled_button = QPushButton('Disabled', parent=self)
		disabled_button.setEnabled(False)
		default_flat_button = QPushButton('Default', parent=self)
		default_flat_button.setFlat(True)
		checked_flat_button = QPushButton('Checked', parent=self)
		checked_flat_button.setFlat(True)
		checked_flat_button.setCheckable(True)
		checked_flat_button.setChecked(True)
		disabled_flat_button = QPushButton('Disabled', parent=self)
		disabled_flat_button.setFlat(True)
		disabled_flat_button.setEnabled(False)
		push_button_group_box.layout().addWidget(default_button, 0, 0)
		push_button_group_box.layout().addWidget(checked_button, 0, 1)
		push_button_group_box.layout().addWidget(disabled_button, 0, 2)
		push_button_group_box.layout().addWidget(default_flat_button, 1, 0)
		push_button_group_box.layout().addWidget(checked_flat_button, 1, 1)
		push_button_group_box.layout().addWidget(disabled_flat_button, 1, 2)
		radio_group_box = QGroupBox('Radio', parent=self)
		radio_group_box.setLayout(QGridLayout())
		radio_group_box.setCheckable(True)
		radio_group_box.setChecked(True)
		tab_widget_1.layout().addWidget(radio_group_box, 1, 0)
		normal_radio_button = QRadioButton('Normal', parent=self)
		uncheck_radio_button = QRadioButton('Uncheck', parent=self)
		disabled_checked_radio_button = QRadioButton('Disabled', parent=self)
		disabled_checked_radio_button.setChecked(True)
		disabled_checked_radio_button.setAutoExclusive(False)
		disabled_checked_radio_button.setEnabled(False)
		disabled_radio_button = QRadioButton('Disabled', parent=self)
		disabled_radio_button.setEnabled(False)
		radio_group_box.layout().addWidget(normal_radio_button, 0, 0)
		radio_group_box.layout().addWidget(uncheck_radio_button, 1, 0)
		radio_group_box.layout().addWidget(disabled_checked_radio_button, 2, 0)
		radio_group_box.layout().addWidget(disabled_radio_button, 3, 0)
		check_group_box = QGroupBox('Check', parent=self)
		check_group_box.setLayout(QGridLayout())
		check_group_box.setCheckable(True)
		check_group_box.setChecked(True)
		tab_widget_1.layout().addWidget(check_group_box, 1, 1)
		normal_check_box = QCheckBox('Normal', parent=self)
		uncheck_check_box = QCheckBox('Uncheck', parent=self)
		disabled_checked_check_box = QCheckBox('Disabled', parent=self)
		disabled_checked_check_box.setChecked(True)
		disabled_checked_check_box.setEnabled(False)
		disabled_check_box = QCheckBox('Disabled', parent=self)
		disabled_check_box.setEnabled(False)
		check_group_box.layout().addWidget(normal_check_box, 0, 0)
		check_group_box.layout().addWidget(uncheck_check_box, 1, 0)
		check_group_box.layout().addWidget(disabled_checked_check_box, 2, 0)
		check_group_box.layout().addWidget(disabled_check_box, 3, 0)
		tab_widget_2 = QWidget(parent=self)
		tab_1.addTab(tab_widget_2, 'Tab 2')

		tab_2 = QTabWidget(parent=self)
		tab_2.setTabPosition(QTabWidget.East)
		tab_widget_3 = QWidget(parent=self)
		tab_widget_3.setLayout(QGridLayout())
		tab_2.addTab(tab_widget_3, 'Tab 1')
		spinbox = QSpinBox(parent=self)
		spinbox.setValue(25)
		double_spinbox = QDoubleSpinBox(parent=self)
		double_spinbox.setValue(3.14)
		combobox = QComboBox(parent=self)
		combobox_with_items = QComboBox(parent=self)
		combobox_with_items.addItems(['Sample Text', 'Item One', 'Item Two'])
		lineedit = QLineEdit(parent=self)
		lineedit_with_text = QLineEdit(parent=self)
		lineedit_with_text.setText('Placeholder Text')
		horizontal_slider = QSlider(parent=self)
		horizontal_slider.setValue(60)
		horizontal_slider.setOrientation(Qt.Horizontal)
		tab_widget_3.layout().addWidget(spinbox, 0, 0)
		tab_widget_3.layout().addWidget(double_spinbox, 1, 0)
		tab_widget_3.layout().addWidget(combobox, 2, 0)
		tab_widget_3.layout().addWidget(combobox_with_items, 3, 0)
		tab_widget_3.layout().addWidget(lineedit, 4, 0)
		tab_widget_3.layout().addWidget(lineedit_with_text, 5, 0)
		tab_widget_3.layout().addWidget(horizontal_slider, 6, 0)
		tab_widget_4 = QWidget(parent=self)
		tab_2.addTab(tab_widget_4, 'Tab 2')

		text_edit = QTextEdit(parent=self)
		text_edit.setHtml("""<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n<html><head><meta name="qrichtext" content="1" /><style type="text/css">\np, li { white-space: pre-wrap; }\n</style></head><body style=" font-family:'MS Shell Dlg 2'; font-size:10pt; font-weight:400; font-style:normal;">\n<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></body></html>""")

		tab_3 = QTabWidget(parent=self)
		tab_widget_5 = QWidget(parent=self)
		tab_widget_5.setLayout(QGridLayout())
		tab_3.addTab(tab_widget_5, 'Tab 1')
		tree_widget = QTreeWidget(parent=self)
		tree_widget.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
		tree_widget.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
		tree_widget.setIndentation(20)
		tree_widget.setRootIsDecorated(True)
		tree_widget.setUniformRowHeights(True)
		tree_widget.setItemsExpandable(True)
		tree_widget.setSortingEnabled(True)
		tree_widget.header().setDefaultSectionSize(300)
		tree_widget.setColumnCount(2)
		tree_widget.setHeaderLabels(['Item Label', 'Type'])
		world_item = QTreeWidgetItem(['Minimal_Default (Editor)', 'World'])
		tree_widget.addTopLevelItem(world_item)
		static_meshes_item = QTreeWidgetItem(['Static Meshes', 'Folder'])
		static_meshes_item.addChild(QTreeWidgetItem(['Table', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Statue', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Floor', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Floor', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Chair', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Chair', 'StaticMeshActor']))
		world_item.addChild(static_meshes_item)
		world_item.addChild(QTreeWidgetItem(['SphereReflectionCapture', 'SphereReflectionCapture']))
		world_item.addChild(QTreeWidgetItem(['SM_Lamp_Ceiling', 'StaticMeshActor']))
		world_item.addChild(QTreeWidgetItem(['SM_Counch', 'StaticMeshActor']))
		lights_item = QTreeWidgetItem(['Lights', 'Folder'])
		lights_item.addChild(QTreeWidgetItem(['SkyLight', 'SkyLight']))
		lights_item.addChild(QTreeWidgetItem(['Light Source', 'DirectionalLight']))
		gameplay_actors_item = QTreeWidgetItem(['GamePlayActors', 'Folder'])
		gameplay_actors_item.addChild(QTreeWidgetItem(['Player Start', 'PlayerStart']))
		audio_item = QTreeWidgetItem(['Audio', 'Folder'])
		audio_item.addChild(QTreeWidgetItem(['Starter_Background_Cue', 'AmbientSound']))
		tree_widget.addTopLevelItem(audio_item)
		tree_widget.header().setStretchLastSection(True)
		tree_widget.expandAll()
		list_widget = QListWidget(parent=self)
		for i in range(7):
			list_widget.addItem(QListWidgetItem('New Item'))
		table_widget = QTableWidget(parent=self)
		table_widget.setColumnCount(3)
		table_widget.setRowCount(3)
		table_widget.setHorizontalHeaderLabels(['Duration', 'Datetime', 'Name'])
		table_widget.horizontalHeader().setStretchLastSection(True)
		table_widget.setAlternatingRowColors(False)
		table_widget.setItem(0, 0, QTableWidgetItem('00:05:02'))
		table_widget.setItem(0, 1, QTableWidgetItem('2020-04-27 17:31:34'))
		table_widget.setItem(0, 2, QTableWidgetItem('Unamed-1'))
		table_widget.setItem(1, 0, QTableWidgetItem('00:01:02'))
		table_widget.setItem(1, 1, QTableWidgetItem('2020-04-27 17:31:34'))
		table_widget.setItem(1, 2, QTableWidgetItem('Unamed-2'))
		table_widget.setItem(2, 0, QTableWidgetItem('00:07:02'))
		table_widget.setItem(2, 1, QTableWidgetItem('2020-04-27 17:31:34'))
		table_widget.setItem(2, 2, QTableWidgetItem('Unamed-3'))
		tab_widget_5.layout().addWidget(tree_widget, 0, 0)
		tab_widget_5.layout().addWidget(list_widget, 0, 1)
		tab_widget_5.layout().addWidget(table_widget, 0, 2)

		tab_widget_6 = QWidget(parent=self)
		tab_3.addTab(tab_widget_6, 'Tab 2')

		grid_layout.addWidget(tab_1, 0, 0)
		grid_layout.addWidget(tab_2, 0, 1)
		grid_layout.addWidget(text_edit, 0, 2)
		grid_layout.addWidget(tab_3, 1, 0, 1, 3)

		progress_frame = QFrame(parent=self)
		progress_frame.setLayout(QHBoxLayout())
		progress_frame.layout().addStretch()
		progress_bar = QProgressBar(parent=self)
		progress_bar.setValue(76)
		progress_frame.layout().addWidget(progress_bar)

		main_layout.addWidget(menubar)
		main_layout.addLayout(grid_layout)
		main_layout.addWidget(progress_frame)


class StandardWidgetsEditorWindow(QMainWindow):
	def __init__(self, parent=None):
		super(StandardWidgetsEditorWindow, self).__init__(parent=parent)

		self.ui()

		self.setWindowTitle('Editor - Standard Qt Widgets Gallery')
		self.resize(620, 651)

		theme_preferences = preferences.get_theme_preference_interface()
		result = theme_preferences.stylesheet()
		self.setStyleSheet(result.data)

	def ui(self):

		main_widget = QWidget(parent=self)
		main_layout = QVBoxLayout()
		main_layout.setContentsMargins(2, 2, 2, 2)
		main_widget.setLayout(main_layout)
		self.setCentralWidget(main_widget)

		general_label = QLabel('General - Appearance', parent=self)
		label_font = general_label.font()
		label_font.setPointSize(15)
		general_label.setFont(label_font)

		horizontal_layout = QHBoxLayout()
		set_as_default_button = QPushButton('Set as Default', parent=self)
		export_button = QPushButton('Export...', parent=self)
		import_button = QPushButton('Import...', parent=self)
		import_button.setCheckable(True)
		import_button.setChecked(True)
		reset_to_default_button = QPushButton('Reset to Default', parent=self)
		horizontal_layout.addStretch()
		horizontal_layout.addWidget(set_as_default_button)
		horizontal_layout.addWidget(export_button)
		horizontal_layout.addWidget(import_button)
		horizontal_layout.addWidget(reset_to_default_button)

		ui_toolbox = QToolBox(parent=self)
		ui_widget = QWidget(parent=self)
		ui_widget.setLayout(QGridLayout())
		enable_high_dpi_support_check = QCheckBox(parent=self)
		enable_high_dpi_support_check.setChecked(True)
		enable_user_editor_layout_management_check = QCheckBox(parent=self)
		enable_user_editor_layout_management_check.setChecked(True)
		show_friendly_variable_names_check = QCheckBox(parent=self)
		show_friendly_variable_names_check.setChecked(True)
		asset_editor_open_location_combo = QComboBox(parent=self)
		asset_editor_open_location_combo.addItems(['Default', 'Not Default'])
		enable_colorized_editor_tabs_check = QCheckBox(parent=self)
		ui_widget.layout().addWidget(QLabel('Enable High DPI Support', parent=self), 0, 0, Qt.AlignLeft)
		ui_widget.layout().addWidget(enable_high_dpi_support_check, 0, 1, Qt.AlignLeft)
		ui_widget.layout().addWidget(QLabel('Enable User Editor Layout Management', parent=self), 1, 0, Qt.AlignLeft)
		ui_widget.layout().addWidget(enable_user_editor_layout_management_check, 1, 1, Qt.AlignLeft)
		ui_widget.layout().addWidget(QLabel('Use Small Tool Bar Icon', parent=self), 2, 0, Qt.AlignLeft)
		ui_widget.layout().addWidget(QCheckBox(parent=self), 2, 1, Qt.AlignLeft)
		ui_widget.layout().addWidget(QLabel('Show Friendly Variable Names', parent=self), 3, 0, Qt.AlignLeft)
		ui_widget.layout().addWidget(show_friendly_variable_names_check, 3, 1, Qt.AlignLeft)
		ui_widget.layout().addWidget(QLabel('Asset Editor Open Location', parent=self), 4, 0, Qt.AlignLeft)
		ui_widget.layout().addWidget(asset_editor_open_location_combo, 4, 1, Qt.AlignLeft)
		ui_widget.layout().addWidget(QLabel('Enable Colorized Editor Tabs', parent=self), 5, 0, Qt.AlignLeft)
		ui_widget.layout().addWidget(enable_colorized_editor_tabs_check, 5, 1, Qt.AlignLeft)
		ui_toolbox.addItem(ui_widget, 'User Interface')
		accessibility_toolbox = QToolBox(parent=self)
		accessibility_widget = QWidget(parent=self)
		accessibility_widget.setLayout(QGridLayout())
		accessibility_toolbox.addItem(accessibility_widget, 'Accessibility')
		color_vision_radio_button = QRadioButton(parent=self)
		color_vision_radio_button.setChecked(True)
		color_vision_combo = QComboBox(parent=self)
		color_vision_combo.addItems(['Normal Vision'])
		accessibility_widget.layout().addWidget(QLabel('Color Vision Deficiency Correction', parent=self), 0, 0, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(color_vision_radio_button, 0, 1, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QLabel('Color Vision Deficiency Correction Preview Deficiency', parent=self), 1, 0, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QRadioButton(parent=self), 1, 1, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QLabel('Color Vision Deficiency Preview Typey', parent=self), 2, 0, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(color_vision_combo, 2, 1, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QLabel('Color Vision Deficiency Severity', parent=self), 3, 0, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QSlider(parent=self), 3, 1, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QLabel('Color Font Size', parent=self), 4, 0, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QSpinBox(parent=self), 4, 1, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QLabel('Color Font Size', parent=self), 5, 0, Qt.AlignLeft)
		accessibility_widget.layout().addWidget(QDoubleSpinBox(parent=self), 5, 1, Qt.AlignLeft)
		color_toolbox = QToolBox(parent=self)
		color_widget = QWidget(parent=self)
		color_toolbox.addItem(color_widget, 'Color')

		main_layout.addWidget(general_label)
		main_layout.addLayout(horizontal_layout)
		main_layout.addWidget(ui_toolbox)
		main_layout.addWidget(accessibility_toolbox)
		main_layout.addWidget(color_toolbox)


class StandardWidgetsTreeWindow(QMainWindow):
	def __init__(self, parent=None):
		super(StandardWidgetsTreeWindow, self).__init__(parent=parent)

		self.ui()

		self.setWindowTitle('Tree - Standard Qt Widgets Gallery')
		self.resize(604, 415)

		theme_preferences = preferences.get_theme_preference_interface()
		result = theme_preferences.stylesheet()
		self.setStyleSheet(result.data)

	def ui(self):

		main_widget = QWidget(parent=self)
		main_layout = QVBoxLayout()
		main_layout.setContentsMargins(2, 2, 2, 2)
		main_widget.setLayout(main_layout)
		self.setCentralWidget(main_widget)

		menubar = QMenuBar(parent=self)
		tab_widget = QTabWidget(parent=self)
		tab_widget.setTabPosition(QTabWidget.East)
		outliner_widget = QWidget(parent=self)
		outliner_widget.setLayout(QVBoxLayout())
		outliner_line = QLineEdit(parent=self)
		outliner_tree_widget = QTreeWidget(parent=self)
		outliner_tree_widget.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
		outliner_tree_widget.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
		outliner_tree_widget.setIndentation(20)
		outliner_tree_widget.setRootIsDecorated(True)
		outliner_tree_widget.setUniformRowHeights(True)
		outliner_tree_widget.setItemsExpandable(True)
		outliner_tree_widget.setSortingEnabled(True)
		outliner_tree_widget.header().setDefaultSectionSize(300)
		outliner_tree_widget.setColumnCount(2)
		outliner_tree_widget.setHeaderLabels(['Item Label', 'Type'])
		world_item = QTreeWidgetItem(['Minimal_Default (Editor)', 'World'])
		outliner_tree_widget.addTopLevelItem(world_item)
		static_meshes_item = QTreeWidgetItem(['Static Meshes', 'Folder'])
		static_meshes_item.addChild(QTreeWidgetItem(['Table', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Statue', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Floor', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Floor', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Chair', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Chair', 'StaticMeshActor']))
		world_item.addChild(static_meshes_item)
		world_item.addChild(QTreeWidgetItem(['SphereReflectionCapture', 'SphereReflectionCapture']))
		world_item.addChild(QTreeWidgetItem(['SM_Lamp_Ceiling', 'StaticMeshActor']))
		world_item.addChild(QTreeWidgetItem(['SM_Counch', 'StaticMeshActor']))
		lights_item = QTreeWidgetItem(['Lights', 'Folder'])
		lights_item.addChild(QTreeWidgetItem(['SkyLight', 'SkyLight']))
		lights_item.addChild(QTreeWidgetItem(['Light Source', 'DirectionalLight']))
		gameplay_actors_item = QTreeWidgetItem(['GamePlayActors', 'Folder'])
		gameplay_actors_item.addChild(QTreeWidgetItem(['Player Start', 'PlayerStart']))
		audio_item = QTreeWidgetItem(['Audio', 'Folder'])
		audio_item.addChild(QTreeWidgetItem(['Starter_Background_Cue', 'AmbientSound']))
		outliner_tree_widget.addTopLevelItem(audio_item)
		outliner_tree_widget.header().setStretchLastSection(True)
		outliner_tree_widget.expandAll()
		outliner_widget.layout().addWidget(outliner_line)
		outliner_widget.layout().addWidget(outliner_tree_widget)

		details_widget = QWidget(parent=self)
		details_widget.setLayout(QVBoxLayout())
		details_line = QLineEdit(parent=self)
		details_tree_widget = QTreeWidget(parent=self)
		details_tree_widget.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
		details_tree_widget.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
		details_tree_widget.setIndentation(20)
		details_tree_widget.setRootIsDecorated(True)
		details_tree_widget.setUniformRowHeights(True)
		details_tree_widget.setItemsExpandable(True)
		details_tree_widget.setSortingEnabled(True)
		details_tree_widget.header().setDefaultSectionSize(300)
		details_tree_widget.setColumnCount(2)
		details_tree_widget.setHeaderLabels(['Item Label', 'Type'])
		world_item = QTreeWidgetItem(['Minimal_Default (Editor)', 'World'])
		details_tree_widget.addTopLevelItem(world_item)
		static_meshes_item = QTreeWidgetItem(['Static Meshes', 'Folder'])
		static_meshes_item.addChild(QTreeWidgetItem(['Table', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Statue', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Floor', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Floor', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Chair', 'StaticMeshActor']))
		static_meshes_item.addChild(QTreeWidgetItem(['Chair', 'StaticMeshActor']))
		world_item.addChild(static_meshes_item)
		world_item.addChild(QTreeWidgetItem(['SphereReflectionCapture', 'SphereReflectionCapture']))
		world_item.addChild(QTreeWidgetItem(['SM_Lamp_Ceiling', 'StaticMeshActor']))
		world_item.addChild(QTreeWidgetItem(['SM_Counch', 'StaticMeshActor']))
		lights_item = QTreeWidgetItem(['Lights', 'Folder'])
		lights_item.addChild(QTreeWidgetItem(['SkyLight', 'SkyLight']))
		lights_item.addChild(QTreeWidgetItem(['Light Source', 'DirectionalLight']))
		gameplay_actors_item = QTreeWidgetItem(['GamePlayActors', 'Folder'])
		gameplay_actors_item.addChild(QTreeWidgetItem(['Player Start', 'PlayerStart']))
		audio_item = QTreeWidgetItem(['Audio', 'Folder'])
		audio_item.addChild(QTreeWidgetItem(['Starter_Background_Cue', 'AmbientSound']))
		details_tree_widget.addTopLevelItem(audio_item)
		details_tree_widget.header().setStretchLastSection(True)
		details_tree_widget.expandAll()
		details_widget.layout().addWidget(details_line)
		details_widget.layout().addWidget(details_tree_widget)

		tab_widget.addTab(outliner_widget, 'Outliner')
		tab_widget.addTab(details_widget, 'Details')
		status_bar = QStatusBar(parent=self)

		main_layout.addWidget(menubar)
		main_layout.addWidget(tab_widget)
		main_layout.addWidget(status_bar)


class StandardWidgetsProgressWindow(QMainWindow):
	def __init__(self, parent=None):
		super(StandardWidgetsProgressWindow, self).__init__(parent=parent)

		self.ui()

		self.setWindowTitle('Progress - Standard Qt Widgets Gallery')
		self.resize(519, 124)

		theme_preferences = preferences.get_theme_preference_interface()
		result = theme_preferences.stylesheet()
		self.setStyleSheet(result.data)

	def ui(self):

		main_widget = QWidget(parent=self)
		main_layout = QVBoxLayout()
		main_layout.setContentsMargins(2, 2, 2, 2)
		main_widget.setLayout(main_layout)
		self.setCentralWidget(main_widget)

		progress_frame = QFrame(parent=self)
		progress_frame.setLayout(QHBoxLayout())
		progress_layout = QGridLayout()
		progress_text_label = QLabel('Importing "TP_TopDownBP"...', parent=self)
		progress_text_label_font = progress_text_label.font()
		progress_text_label_font.setPointSize(12)
		progress_text_label.setFont(progress_text_label_font)
		progress_indicator_label = QLabel('40%', parent=self)
		progress_indicator_label_font = progress_indicator_label.font()
		progress_indicator_label_font.setPointSize(12)
		progress_indicator_label.setFont(progress_indicator_label_font)
		progress_indicator_label.setLayoutDirection(Qt.LeftToRight)
		progress_bar = QProgressBar(parent=self)
		progress_bar.setValue(40)
		progress_layout.addWidget(progress_text_label, 0, 0, Qt.AlignLeft)
		progress_layout.addWidget(progress_indicator_label, 0, 1, Qt.AlignRight)
		progress_layout.addWidget(progress_bar, 1, 0, 1, 2)
		progress_layout.addItem(QSpacerItem(10, 0, QSizePolicy.Fixed, QSizePolicy.Expanding), 1, 0)
		progress_frame.layout().addLayout(progress_layout)

		main_layout.addWidget(progress_frame)
