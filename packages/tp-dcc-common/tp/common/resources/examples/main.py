from tp.core import dcc
from tp.common.qt import api as qt
from tp.preferences.interfaces import core


class MainWindow(qt.QMainWindow):
	def __init__(self):
		super().__init__(parent=dcc.main_window())

		self.resize(1125, 600)

		central_widget = qt.QWidget(parent=self)
		main_layout = qt.QGridLayout()
		main_layout.setContentsMargins(9, 9, 9, 9)
		main_layout.setSpacing(6)
		central_widget.setLayout(main_layout)
		self.setCentralWidget(central_widget)

		menubar = self.menuBar()
		menubar_menu = qt.QMenu('Menu', parent=self)
		menubar_menu.addAction('Switch UI')
		menubar.addMenu(menubar_menu)

		tab_widget_1 = qt.QTabWidget(parent=self)
		tab_widget_1.setTabPosition(qt.QTabWidget.West)
		tab_widget_1_widget = qt.QWidget(parent=self)
		tab_widget_1_layout = qt.QGridLayout()
		tab_widget_1_widget.setLayout(tab_widget_1_layout)
		push_button_group_box = qt.QGroupBox(parent=self)
		push_button_group_box.setTitle('Push Button')
		push_button_group_box.setCheckable(True)
		push_button_group_box.setChecked(True)
		push_button_group_box_layout = qt.QGridLayout()
		push_button_group_box.setLayout(push_button_group_box_layout)
		default_button = qt.QPushButton('Default', parent=self)
		checked_button = qt.QPushButton('Checked', parent=self)
		checked_button.setCheckable(True)
		checked_button.setChecked(True)
		disabled_button = qt.QPushButton('Disabled', parent=self)
		disabled_button.setEnabled(False)
		flat_default_button = qt.QPushButton('Flat', parent=self)
		flat_default_button.setFlat(True)
		flat_checked_button = qt.QPushButton('Checked', parent=self)
		flat_checked_button.setFlat(True)
		flat_checked_button.setCheckable(True)
		flat_checked_button.setChecked(True)
		flat_disabled_button = qt.QPushButton('Disabled', parent=self)
		flat_disabled_button.setEnabled(False)
		flat_disabled_button.setFlat(True)
		push_button_group_box_layout.addWidget(default_button, 0, 0)
		push_button_group_box_layout.addWidget(checked_button, 0, 1)
		push_button_group_box_layout.addWidget(disabled_button, 0, 2)
		push_button_group_box_layout.addWidget(flat_default_button, 1, 0)
		push_button_group_box_layout.addWidget(flat_checked_button, 1, 1)
		push_button_group_box_layout.addWidget(flat_disabled_button, 1, 2)
		radio_button_group_box = qt.QGroupBox(parent=self)
		radio_button_group_box.setTitle('Radio')
		radio_button_group_box.setCheckable(True)
		radio_button_group_box.setChecked(True)
		radio_button_group_box_layout = qt.QGridLayout()
		radio_button_group_box.setLayout(radio_button_group_box_layout)
		normal_radio = qt.QRadioButton('Normal', parent=self)
		normal_radio.setChecked(True)
		uncheck_radio = qt.QRadioButton('Uncheck', parent=self)
		disabled_radio = qt.QRadioButton('Disabled', parent=self)
		disabled_radio.setChecked(True)
		disabled_radio.setEnabled(False)
		disabled_uncheck_radio = qt.QRadioButton('Disabled', parent=self)
		disabled_uncheck_radio.setEnabled(False)
		radio_button_group_box_layout.addWidget(normal_radio, 0, 0)
		radio_button_group_box_layout.addWidget(uncheck_radio, 1, 0)
		radio_button_group_box_layout.addWidget(disabled_radio, 2, 0)
		radio_button_group_box_layout.addWidget(disabled_uncheck_radio, 3, 0)
		check_button_group_box = qt.QGroupBox(parent=self)
		check_button_group_box.setTitle('Check')
		check_button_group_box_layout = qt.QGridLayout()
		check_button_group_box.setLayout(check_button_group_box_layout)
		normal_check = qt.QCheckBox('Normal', parent=self)
		normal_check.setChecked(True)
		uncheck_check = qt.QCheckBox('Uncheck', parent=self)
		check_disabled = qt.QCheckBox('Disabled', parent=self)
		check_disabled.setChecked(True)
		check_disabled.setEnabled(False)
		uncheck_disabled = qt.QCheckBox('Disabled', parent=self)
		uncheck_disabled.setEnabled(False)
		check_button_group_box_layout.addWidget(normal_check, 0, 0)
		check_button_group_box_layout.addWidget(uncheck_check, 1, 0)
		check_button_group_box_layout.addWidget(check_disabled, 2, 0)
		check_button_group_box_layout.addWidget(uncheck_disabled, 3, 0)
		tab_widget_1_layout.addWidget(push_button_group_box, 0, 0, 1, 2)
		tab_widget_1_layout.addWidget(radio_button_group_box, 1, 0)
		tab_widget_1_layout.addWidget(check_button_group_box, 1, 1)
		tab_widget_1_widget_2 = qt.QWidget()
		tab_widget_1.addTab(tab_widget_1_widget, 'Tab 1')
		tab_widget_1.addTab(tab_widget_1_widget_2, 'Tab 2')

		tab_widget_2 = qt.QTabWidget(parent=self)
		tab_widget_2.setTabsClosable(True)
		tab_widget_2.setTabPosition(qt.QTabWidget.East)
		tab_widget_2_widget = qt.QWidget(parent=self)
		tab_widget_2_layout = qt.QGridLayout()
		tab_widget_2_widget.setLayout(tab_widget_2_layout)
		spinbox = qt.QSpinBox(parent=self)
		spinbox.setValue(25)
		double_spinbox = qt.QDoubleSpinBox(parent=self)
		double_spinbox.setValue(3.14)
		combobox = qt.QComboBox(parent=self)
		combobox_with_items = qt.QComboBox(parent=self)
		combobox_with_items.addItems(['Sample Text', 'Item One', 'Item Two'])
		lineedit = qt.QLineEdit(parent=self)
		lineedit_with_text = qt.QLineEdit(parent=self)
		lineedit_with_text.setText('place holder')
		slider = qt.QSlider(parent=self)
		slider.setValue(60)
		slider.setOrientation(qt.Qt.Horizontal)
		slider.setTickPosition(qt.QSlider.NoTicks)
		tab_widget_2_layout.addWidget(spinbox, 0, 0)
		tab_widget_2_layout.addWidget(double_spinbox, 1, 0)
		tab_widget_2_layout.addWidget(combobox, 2, 0)
		tab_widget_2_layout.addWidget(combobox_with_items, 3, 0)
		tab_widget_2_layout.addWidget(lineedit, 4, 0)
		tab_widget_2_layout.addWidget(lineedit_with_text, 5, 0)
		tab_widget_2_layout.addWidget(slider, 6, 0)
		tab_widget_2_widget_2 = qt.QWidget(parent=self)
		tab_widget_2.addTab(tab_widget_2_widget, 'Tab 1')
		tab_widget_2.addTab(tab_widget_2_widget_2, 'Tab 2')
		text_layout = qt.QVBoxLayout()
		text_edit = qt.QTextEdit(parent=self)
		text_edit.setHtml('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')
		text_layout.addWidget(text_edit)

		tab_widget_3 = qt.QTabWidget(parent=self)
		tab_widget_3.setTabsClosable(True)
		tab_widget_3_widget = qt.QWidget(parent=self)
		tab_widget_3_layout = qt.QGridLayout()
		tab_widget_3_widget.setLayout(tab_widget_3_layout)
		tree_widget = qt.QTreeWidget(parent=self)
		tree_widget.setHeaderLabels(['Item Label', 'Type'])
		world_item = qt.QTreeWidgetItem(['Minimal_Default (Editor)', 'World'])
		static_meshes_item = qt.QTreeWidgetItem(['StaticMeshes', 'Folder'])
		static_meshes_item.addChildren([qt.QTreeWidgetItem([mesh_name, 'StaticMeshActor']) for mesh_name in ['Table', 'Statue', 'Floor', 'Floor', 'Chair', 'Chair']])
		sphere_reflection_capture_item = qt.QTreeWidgetItem(['SphereReflectionCapture', 'SphereReflectionCapture'])
		lamp_ceiling = qt.QTreeWidgetItem(['SM_Lamp_Ceiling', 'StaticMeshActor'])
		couch_item = qt.QTreeWidgetItem(['SM_Couch', 'StaticMeshActor'])
		lights_item = qt.QTreeWidgetItem(['Lights', 'Folder'])
		lights_item.addChildren([qt.QTreeWidgetItem(['SkyLight', 'SkyLight']), qt.QTreeWidgetItem(['Light Source', 'DirectionalLight'])])
		gameplay_actors_item = qt.QTreeWidgetItem(['GamePlayActors', 'Folder'])
		gameplay_actors_item.addChild(qt.QTreeWidgetItem(['Player Start', 'PlayerStart']))
		audio_item = qt.QTreeWidgetItem(['Audio', 'Folder'])
		audio_item.addChild(qt.QTreeWidgetItem(['Starter_Background_Cue', 'AmbientSound']))
		world_item.addChildren([static_meshes_item, sphere_reflection_capture_item, lamp_ceiling, couch_item, lights_item, gameplay_actors_item, audio_item])
		tree_widget.addTopLevelItem(world_item)
		tree_widget.expandAll()
		list_widget = qt.QListWidget(parent=self)
		for i in range(8):
			list_widget.addItem(qt.QListWidgetItem('New Item'))
		table_widget = qt.QTableWidget(parent=self)
		table_widget.horizontalHeader().setStretchLastSection(True)
		table_widget.setColumnCount(3)
		table_widget.setRowCount(3)
		table_widget.setHorizontalHeaderLabels(['Duration', 'Datetime', 'Name'])
		table_widget.setVerticalHeaderLabels(['Row-1', '', 'Row-2'])
		row_1_item = qt.QTableWidgetItem('00:05:02')
		row_1_item.setCheckState(qt.Qt.Checked)
		table_widget.setItem(0, 0, row_1_item)
		table_widget.setItem(0, 1, qt.QTableWidgetItem('2020-04-27 17:31:34'))
		table_widget.setItem(0, 2, qt.QTableWidgetItem('Unamed-1'))
		row_2_item = qt.QTableWidgetItem('00:01:02')
		row_2_item.setCheckState(qt.Qt.Checked)
		table_widget.setItem(1, 0, row_1_item)
		table_widget.setItem(1, 1, qt.QTableWidgetItem('2020-04-27 17:31:34'))
		table_widget.setItem(1, 2, qt.QTableWidgetItem('Unamed-2'))
		row_3_item = qt.QTableWidgetItem('00:07:02')
		row_3_item.setCheckState(qt.Qt.Checked)
		table_widget.setItem(2, 0, row_1_item)
		table_widget.setItem(2, 1, qt.QTableWidgetItem('2020-04-27 17:31:34'))
		table_widget.setItem(2, 2, qt.QTableWidgetItem('Unamed-3'))
		tab_widget_3_layout.addWidget(tree_widget, 0, 0)
		tab_widget_3_layout.addWidget(list_widget, 0, 1)
		tab_widget_3_layout.addWidget(table_widget, 0, 2)
		tab_widget3_widget_2 = qt.QWidget(parent=self)
		tab_widget_3.addTab(tab_widget_3_widget, 'Tab 1')
		tab_widget_3.addTab(tab_widget3_widget_2, 'Tab 2')

		frame = qt.QFrame(parent=self)
		frame_layout = qt.QHBoxLayout()
		frame.setLayout(frame_layout)
		progress_bar = qt.QProgressBar(parent=self)
		progress_bar.setValue(75)
		frame_layout.addStretch()
		frame_layout.addWidget(progress_bar)

		main_layout.addWidget(tab_widget_1, 0, 0)
		main_layout.addWidget(tab_widget_2, 0, 1)
		main_layout.addLayout(text_layout, 0, 2)
		main_layout.addWidget(tab_widget_3, 1, 0, 1, 3)
		main_layout.addWidget(frame, 2, 0, 1, 3)


def show(apply_style=True):
	win = MainWindow()
	if apply_style:
		theme = core.theme_preference_interface()
		win.setStyleSheet(theme.stylesheet().data)
	win.show()

	return win
